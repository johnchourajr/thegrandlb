// Code generated by Slice Machine. DO NOT EDIT.

import type * as prismicT from "@prismicio/types";
import type * as prismic from "@prismicio/client";

type Simplify<T> = {
    [KeyType in keyof T]: T[KeyType];
};
/** Content for Event Page documents */
interface EventPageDocumentData {
    /**
     * Title field in *Event Page*
     *
     * - **Field Type**: Text
     * - **Placeholder**: *None*
     * - **API ID Path**: event_page.title
     * - **Tab**: Main
     * - **Documentation**: https://prismic.io/docs/core-concepts/key-text
     *
     */
    title: prismicT.KeyTextField;
}
/**
 * Event Page document from Prismic
 *
 * - **API ID**: `event_page`
 * - **Repeatable**: `true`
 * - **Documentation**: https://prismic.io/docs/core-concepts/custom-types
 *
 * @typeParam Lang - Language API ID of the document.
 */
export type EventPageDocument<Lang extends string = string> = prismicT.PrismicDocumentWithUID<Simplify<EventPageDocumentData>, "event_page", Lang>;
/** Content for Tour Page documents */
type TourPageDocumentData = Record<string, never>;
/**
 * Tour Page document from Prismic
 *
 * - **API ID**: `tour_page`
 * - **Repeatable**: `true`
 * - **Documentation**: https://prismic.io/docs/core-concepts/custom-types
 *
 * @typeParam Lang - Language API ID of the document.
 */
export type TourPageDocument<Lang extends string = string> = prismicT.PrismicDocumentWithoutUID<Simplify<TourPageDocumentData>, "tour_page", Lang>;
export type AllDocumentTypes = EventPageDocument | TourPageDocument;
declare module "@prismicio/client" {
    interface CreateClient {
        (repositoryNameOrEndpoint: string, options?: prismic.ClientConfig): prismic.Client<AllDocumentTypes>;
    }
    namespace Content {
        export type { EventPageDocumentData, EventPageDocument, TourPageDocumentData, TourPageDocument, AllDocumentTypes };
    }
}
